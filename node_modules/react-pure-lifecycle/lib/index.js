'use strict';

exports.__esModule = true;
exports.componentWillUnmount = exports.componentDidCatch = exports.componentDidUpdate = exports.getSnapshotBeforeUpdate = exports.componentWillUpdate = exports.UNSAFE_componentWillUpdate = exports.shouldComponentUpdate = exports.componentWillReceiveProps = exports.UNSAFE_componentWillReceiveProps = exports.componentDidMount = exports.componentWillMount = exports.UNSAFE_componentWillMount = exports.getChildContext = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // external dependencies


//components


// constants


// utils


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _components = require('./components');

var _constants = require('./constants');

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @function addLifecycleMethods
 *
 * @description
 * add the lifecycle hooks to the component and return it
 *
 * @param {Object} [methods={}] the methods passed
 * @param {Object} [optionsPassed={}] the options passed
 * @returns {function(PassedComponent: ReactComponent): ReactComponent} the component augmented with lifecycle methods
 */
var addLifecycleMethods = function addLifecycleMethods() {
  var methods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var optionsPassed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!(0, _utils.isPlainObject)(methods)) {
    throw new TypeError('Methods passed must be in the form of a plain object.');
  }

  if (!(0, _utils.isPlainObject)(optionsPassed)) {
    throw new TypeError('Options passed must be in the form of a plain object.');
  }

  return function (PassedComponent) {
    var getHoc = (0, _utils.isReactClass)(PassedComponent) ? _components.getClassHoc : _components.getFunctionHoc;

    return getHoc(PassedComponent, methods, _extends({}, _constants.DEFAULT_OPTIONS, optionsPassed));
  };
};

var _Object$keys$reduce = Object.keys(_constants.LIFECYCLE_METHODS).reduce(function (exportsObject, method) {
  // eslint-disable-next-line no-param-reassign
  exportsObject[method] = (0, _utils.createSingleLifecycleMethodDecorator)(method, addLifecycleMethods);

  return exportsObject;
}, {}),
    getChildContext = _Object$keys$reduce.getChildContext,
    UNSAFE_componentWillMount = _Object$keys$reduce.UNSAFE_componentWillMount,
    componentWillMount = _Object$keys$reduce.componentWillMount,
    componentDidMount = _Object$keys$reduce.componentDidMount,
    UNSAFE_componentWillReceiveProps = _Object$keys$reduce.UNSAFE_componentWillReceiveProps,
    componentWillReceiveProps = _Object$keys$reduce.componentWillReceiveProps,
    shouldComponentUpdate = _Object$keys$reduce.shouldComponentUpdate,
    UNSAFE_componentWillUpdate = _Object$keys$reduce.UNSAFE_componentWillUpdate,
    componentWillUpdate = _Object$keys$reduce.componentWillUpdate,
    getSnapshotBeforeUpdate = _Object$keys$reduce.getSnapshotBeforeUpdate,
    componentDidUpdate = _Object$keys$reduce.componentDidUpdate,
    componentDidCatch = _Object$keys$reduce.componentDidCatch,
    componentWillUnmount = _Object$keys$reduce.componentWillUnmount;

exports.getChildContext = getChildContext;
exports.UNSAFE_componentWillMount = UNSAFE_componentWillMount;
exports.componentWillMount = componentWillMount;
exports.componentDidMount = componentDidMount;
exports.UNSAFE_componentWillReceiveProps = UNSAFE_componentWillReceiveProps;
exports.componentWillReceiveProps = componentWillReceiveProps;
exports.shouldComponentUpdate = shouldComponentUpdate;
exports.UNSAFE_componentWillUpdate = UNSAFE_componentWillUpdate;
exports.componentWillUpdate = componentWillUpdate;
exports.getSnapshotBeforeUpdate = getSnapshotBeforeUpdate;
exports.componentDidUpdate = componentDidUpdate;
exports.componentDidCatch = componentDidCatch;
exports.componentWillUnmount = componentWillUnmount;
exports.default = addLifecycleMethods;