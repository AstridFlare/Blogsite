var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

// external dependencies
import React from 'react';

//components
import { getClassHoc, getFunctionHoc } from './components';

// constants
import { DEFAULT_OPTIONS, LIFECYCLE_METHODS } from './constants';

// utils
import { createSingleLifecycleMethodDecorator, isPlainObject, isReactClass } from './utils';

/**
 * @function addLifecycleMethods
 *
 * @description
 * add the lifecycle hooks to the component and return it
 *
 * @param {Object} [methods={}] the methods passed
 * @param {Object} [optionsPassed={}] the options passed
 * @returns {function(PassedComponent: ReactComponent): ReactComponent} the component augmented with lifecycle methods
 */
var addLifecycleMethods = function addLifecycleMethods() {
  var methods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var optionsPassed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (!isPlainObject(methods)) {
    throw new TypeError('Methods passed must be in the form of a plain object.');
  }

  if (!isPlainObject(optionsPassed)) {
    throw new TypeError('Options passed must be in the form of a plain object.');
  }

  return function (PassedComponent) {
    var getHoc = isReactClass(PassedComponent) ? getClassHoc : getFunctionHoc;

    return getHoc(PassedComponent, methods, _extends({}, DEFAULT_OPTIONS, optionsPassed));
  };
};

var _Object$keys$reduce = Object.keys(LIFECYCLE_METHODS).reduce(function (exportsObject, method) {
  // eslint-disable-next-line no-param-reassign
  exportsObject[method] = createSingleLifecycleMethodDecorator(method, addLifecycleMethods);

  return exportsObject;
}, {}),
    getChildContext = _Object$keys$reduce.getChildContext,
    UNSAFE_componentWillMount = _Object$keys$reduce.UNSAFE_componentWillMount,
    componentWillMount = _Object$keys$reduce.componentWillMount,
    componentDidMount = _Object$keys$reduce.componentDidMount,
    UNSAFE_componentWillReceiveProps = _Object$keys$reduce.UNSAFE_componentWillReceiveProps,
    componentWillReceiveProps = _Object$keys$reduce.componentWillReceiveProps,
    shouldComponentUpdate = _Object$keys$reduce.shouldComponentUpdate,
    UNSAFE_componentWillUpdate = _Object$keys$reduce.UNSAFE_componentWillUpdate,
    componentWillUpdate = _Object$keys$reduce.componentWillUpdate,
    getSnapshotBeforeUpdate = _Object$keys$reduce.getSnapshotBeforeUpdate,
    componentDidUpdate = _Object$keys$reduce.componentDidUpdate,
    componentDidCatch = _Object$keys$reduce.componentDidCatch,
    componentWillUnmount = _Object$keys$reduce.componentWillUnmount;

export { getChildContext };
export { UNSAFE_componentWillMount };
export { componentWillMount };
export { componentDidMount };
export { UNSAFE_componentWillReceiveProps };
export { componentWillReceiveProps };
export { shouldComponentUpdate };
export { UNSAFE_componentWillUpdate };
export { componentWillUpdate };
export { getSnapshotBeforeUpdate };
export { componentDidUpdate };
export { componentDidCatch };
export { componentWillUnmount };

export default addLifecycleMethods;